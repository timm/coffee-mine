#!/usr/bin/env coffee
# Copyright (c) 2011,2012 Tim Menzies, MIT License
# 
#   #####     #    #       ######   ####
#     #       #    #       #       #
#     #       #    #       #####    ####
#     #       #    #       #            #
#     #       #    #       #       #    #
#     #       #    ######  ######   ####
# 
# Version ....... : tiles-87
# Built ......... : Sun Jan  1 20:36:18 EST 2012
# License ....... : see below.
# Installation .. : see below.
# Report bugs ... : https://github.com/timm/coffee-mine/issues
# For doco ...... : read http://coffee.unbox.org around Sun Jan  1 20:36:18 EST 2012
 
#--| lib/globals.coffee |-------------------------------------------------------------
 
pow  = Math.pow
e    = Math.E
pi   = Math.PI
sqrt = Math.sqrt
ln   = Math.log
show = console.log

inf  = 1e+32
ninf = -1 * inf

d2 = (n) -> Math.round(n*100)/100

d3 = (n) -> Math.round(n*1000)/1000

d4 = (n) -> Math.round(n*10000)/10000

nummat = (number, decimals, dec=".", sep=",") ->
  # from http://goo.gl/2vcMH
  number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
  n      = if isFinite(+number) then +number else 0
  prec   = if isFinite(+decimals) then Math.abs(decimals) else 0
  s      = ''
  toFixedFix =  (n, prec) ->
    k = Math.pow(10, prec)
    '' + Math.round(n * k) / k
  s = if prec then toFixedFix(n, prec) else '' + Math.round(n)
  s = s.split('.')
  if (s[0].length > 3)
     s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
  if (s[1]  || '').length < prec
      s[1] = s[1] || ''
      s[1] += new Array(prec - s[1].length + 1).join('0')
   s.join(dec)
 
#--| lib/tiles.coffee |-------------------------------------------------------------
 
class Percentiles
  constructor:(@l,@prefix="",@w=3,@decimals=2,@right=100\
               ,@width=100,@scale=4,@min=1,@max=100\
               ,@left="[",@right="]",@tick="-") ->

  lo:  (n) -> Math.floor n
  as:  (n) -> nummat n,@decimals

  asString:() -> @worker(@l.sort(),@l.length,@prefix)

  worker: (l ,n,q,prefix) ->
    q1     = @as l[@lo 0.10*n]; q1s  = @pad q1
    q2     = @as l[@lo 0.30*n]; q2s  = @pad q2
    median = @as l[@lo 0.50*n]; meds = @pad median
    q3     = @as l[@lo 0.70*n]; q3s  = @pad q3
    q4     = @as l[@lo 0.90*n]; q4s  = @pad q4
    "#{@prefix}#{q1s}, #{q2s}, #{meds}, #{q3s}, #{q4s}, " + \
     @pretty(q1,q2,median,q3,q4)

  pretty: (q1,q2,med,q3,q4) ->
    @width    /= @scale
    q1        /= @scale
    q2        /= @scale
    q3        /= @scale
    q4        /= @scale
    med       /= @scale
    a          = []
    a[@lo i]   = " " for i in [0..@width]
    a[@lo i]   = @tick for i in [q1..q2]
    a[@lo i]   = @tick for i in [q3..q4]
    a[@lo med] = "|"
    @left + a.join("") + @right

  pad: (n) ->
    tmp = ""
    size = "#{n}".length
    for i in [1..(@w - size)]
      tmp = " " + tmp
    "#{tmp}#{n}"
 
#--| lib/rand.coffee |-------------------------------------------------------------
 
class Rand
  # Knuth and Lewis' improvements to Park and Miller's LCPRNG
  # if created without a seed, uses current time as seed
  constructor: (@seed) ->
    @multiplier = 1664525
    @modulo     = 4294967296 # 2**32-1;
    @offset     = 1013904223
    unless @seed? && 0 <= seed < @modulo
      @seed = (new Date().valueOf() * new Date().getMilliseconds()) % @modulo

  seed: (seed)      -> @seed = seed
  randn:            -> @seed = (@multiplier*@seed + @offset) % @modulo
  randf:            -> @randn() / @modulo
  rand:  (n)        -> Math.floor(@randf() * n)
  rand2: (min, max) -> min + @rand(max-min)

R = new Rand

shuffle = (l,r = R) ->
  n = l.length
  for i in [n-1..1]
    j = r.rand2(0,i)
    [ l[i],  l[j] ] = [ l[j], l[i] ]
  l

normal = (m,s,r = R) ->
  boxMuller = () ->
    w=1
    while w >= 1
      x1 = 2.0 * r.randf() - 1
      x2 = 2.0 * r.randf() - 1
      w  = x1*x1 + x2*x2
    w = sqrt((-2.0 * ln(w))/w)
    x1 * w
  m + boxMuller() * s

any = (l,r=R) ->
  l[r.rand2(0,l.length)]
 
#--| tiles.coffee |-------------------------------------------------------------
 

 demo = () ->
   n = 1000
   one = () -> 100*pow normal(0.5,0.3),0.3
   all = () -> (one() for i in [1..n])
   p = new Percentiles all(),"MarriageDivorces,",3,0
   show p.asString()

demo()



 
# CREDITS
# =======
# 
# Tim Menzies tim@menzies.us
# 
# INSTALL
# =======
# 
# 0)  Essential first step: make yourself a cup of coffee.
# 1)  Install coffee on your local machine.
# 
# 2)  Download this file and call it, say,  'lib/globals.coffee'.
#     2a) Optional (UNIX systems only)
# 
#        chmod +x lib/globals.coffee  # <=== On UNIX systems
# 
# 3)  Look for 'data/' in this file. Usually, its the last few
#     lines of code (above). If you see any reference to such 
#     a data file, then...
#     3a) Download those data files from
#         http://now.unbox.org/all/trunk/doc/coffee-mine/data
#     3b) Edit this file so it points to those data files.
# 
# 4)  See if this file runs:
# 
#         ./lib/globals.coffee         # <=== UNIX systems
#         coffee lib/globals.coffee    # <=== for other systems
# 
# To check if it is running correctly, see http://coffee.unbox.com 
# (look for blogs entries around lib/rand.coffee).
# 
# COPYRIGHT
# ---------
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
