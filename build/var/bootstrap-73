#!/usr/bin/env coffee
# Copyright (c) 2011,2012 Tim Menzies, MIT License
# 
#  #####    ####    ####    #####   ####    #####  #####     ##    #####
#  #    #  #    #  #    #     #    #          #    #    #   #  #   #    #
#  #####   #    #  #    #     #     ####      #    #    #  #    #  #    #
#  #    #  #    #  #    #     #         #     #    #####   ######  #####
#  #    #  #    #  #    #     #    #    #     #    #   #   #    #  #
#  #####    ####    ####      #     ####      #    #    #  #    #  #
# 
# Version ....... : bootstrap-73
# Built ......... : Fri Dec 30 00:35:28 EST 2011
# License ....... : see below.
# Installation .. : see below.
# Report bugs ... : https://github.com/timm/coffee-mine/issues
# For doco ...... : read http://coffee.unbox.org around Fri Dec 30 00:35:28 EST 2011
 
#--| lib/globals.coffee |-------------------------------------------------------------
 
pow  = Math.pow
e    = Math.E
pi   = Math.PI
sqrt = Math.sqrt
ln   = Math.log
show = console.log

inf  = 1e+32
ninf = -1 * inf

d2 = (n) -> Math.floor(n*100)/100
d3 = (n) -> Math.floor(n*1000)/1000
d4 = (n) -> Math.floor(n*10000)/10000 
#--| lib/rand.coffee |-------------------------------------------------------------
 
class Rand
  # Knuth and Lewis' improvements to Park and Miller's LCPRNG
  # if created without a seed, uses current time as seed
  constructor: (@seed) ->
    @multiplier = 1664525
    @modulo     = 4294967296 # 2**32-1;
    @offset     = 1013904223
    unless @seed? && 0 <= seed < @modulo
      @seed = (new Date().valueOf() * new Date().getMilliseconds()) % @modulo

  seed: (seed)      -> @seed = seed
  randn:            -> @seed = (@multiplier*@seed + @offset) % @modulo
  randf:            -> @randn() / @modulo
  rand:  (n)        -> Math.floor(@randf() * n)
  rand2: (min, max) -> min + @rand(max-min)

R = new Rand

shuffle = (l,r = R) ->
  n = l.length
  for i in [n-1..1]
    j = r.rand2(0,i)
    [ l[i],  l[j] ] = [ l[j], l[i] ]
  l

normal = (m,s,r = R) ->
  boxMuller = () ->
    w=1
    while w >= 1
      x1 = 2.0 * r.randf() - 1
      x2 = 2.0 * r.randf() - 1
      w  = x1*x1 + x2*x2
    w = sqrt((-2.0 * ln(w))/w)
    x1 * w
  m + boxMuller() * s

any = (l,r=R) ->
  l[r.rand2(0,l.length)]
 
#--| lib/stats.coffee |-------------------------------------------------------------
 
class Distribution
  constructor: (l) -> @adds(l)
  adds:(l) -> @add x for x in l if l

class Bins extends Distribution
  constructor:(l) ->
    @n = 0
    @symbols = 0
    @symbolTable = {}
    @all = {}
    super l

  add:(x) ->
    @n = @n + 1
    now = @all[x] = (@all[x] or= 0) + 1
    if now is 1
      @symbols += 1
      @symbolTable[x] = @symbols
    x

  p:(x) -> (@all[x] ? 0)/@n
  prob:(x,m,prior) -> ((@all[x] ? 0) + m*prior)/(@n + m)

class Normal extends Distribution
  constructor:(l) ->
    @max = -1000000000
    @min = 1000000000
    @n   = 0
    @sum = 0
    @sumSq = 0
    super l

  prob:(x,m,prior) -> @p x
  add:(x) ->
    @n     = @n + 1
    @sum   = @sum + x
    @sumSq = @sumSq + x*x
    @min   = x if x < @min
    @max   = x if x > @max
    @_mean = @_stdev = null
    x

  mean:  -> @_mean or= @sum/@n
  stdev: ->
    @_stdev or= sqrt((@sumSq-((@sum*@sum)/@n))/(@n-1))

  p:(x) =>
    s = @stdev()
    1/(sqrt(2*pi)*s) * (pow e, (-1*(pow x-@mean(),2)/(2*s*s)))
 
#--| bootstrap.coffee |-------------------------------------------------------------
 
class Boot
  constructor:(b,m,n,y,z) ->
    @b = b
    @m = m
    @n = n
    @y = y
    @z = z
    @tobs = @tee(y,z)

  tee:(y,z) ->
    ySum  = zSum = tmp1 = tmp2 = 0
    ySum += i for i in y
    zSum += 1 for i in z
    tmp1 += pow i - ySum, 2 for i in y
    tmp2 += pow i - zSum, 2 for i in z
    s1    = tmp1/(@m - 1)
    s2    = tmp2/(@n - 1)
    (zSum/@n - ySum/@m) / sqrt(s1/@m + s2/@n)

  main:() ->
    zsum = ysum = xsum = 0;
    for i in @z
      xsum += i ; zsum += i
    for i in @y
      xsum += i ; ysum += i
    xmu  = xsum/(@m + @n)
    ymu  = ysum/@m
    zmu  = zsum/@n
    yhat = (i - ymu + xmu for i in @y)
    zhat = (i - zmu + xmu for i in @z)
    bigger = 0
    for j in [1..@b]
      ystar = (any yhat for i in [1..@m])
      zstar = (any zhat for i in [1..@n])
      if @tee(ystar,zstar) > @tobs
        bigger += 1
    bigger/@b

bootDemo = ()  ->
  R = new Rand 2
  b  = 10000
  m1 = 10; s1 = 0.1; m = 100
  m2 = 10; s2 = 0.1; n = 100
  x  = new Boot b,m,n,
                (normal m1,s1 for i in [1..m]),
                (normal m2,s2 for i in [1..n])
  show x.main()

bootDemo() 
# CREDITS
# =======
# 
# Tim Menzies tim@menzies.us
# 
# INSTALL
# =======
# 
# 0)  Essential first step: make yourself a cup of coffee.
# 1)  Install coffee on your local machine.
# 
# 2)  Download this file and call it, say,  'lib/globals.coffee'.
#     2a) Optional (UNIX systems only)
# 
#        chmod +x lib/globals.coffee  # <=== On UNIX systems
# 
# 3)  Look for 'data/' in this file. Usually, its the last few
#     lines of code (above). If you see any reference to such 
#     a data file, then...
#     3a) Download those data files from
#         http://now.unbox.org/all/trunk/doc/coffee-mine/data
#     3b) Edit this file so it points to those data files.
# 
# 4)  See if this file runs:
# 
#         ./lib/globals.coffee         # <=== UNIX systems
#         coffee lib/globals.coffee    # <=== for other systems
# 
# To check if it is running correctly, see http://coffee.unbox.com 
# (look for blogs entries around lib/stats.coffee).
# 
# COPYRIGHT
# ---------
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
