#!/usr/bin/env coffee
# Copyright (c) 2011,2012 Tim Menzies, MIT License
# 
#   #####     #    #       ######   ####
#     #       #    #       #       #
#     #       #    #       #####    ####
#     #       #    #       #            #
#     #       #    #       #       #    #
#     #       #    ######  ######   ####
# 
# Version ....... : tiles-83
# Built ......... : Sun Jan  1 15:20:14 EST 2012
# License ....... : see below.
# Installation .. : see below.
# Report bugs ... : https://github.com/timm/coffee-mine/issues
# For doco ...... : read http://coffee.unbox.org around Sun Jan  1 15:20:14 EST 2012
 
#--| lib/globals.coffee |-------------------------------------------------------------
 
pow  = Math.pow
e    = Math.E
pi   = Math.PI
sqrt = Math.sqrt
ln   = Math.log
show = console.log

inf  = 1e+32
ninf = -1 * inf

d2 = (n) -> Math.round(n*100)/100

d3 = (n) -> Math.round(n*1000)/1000

d4 = (n) -> Math.round(n*10000)/10000

show 11

nummat = (number, decimals, dec=".", sep=",") ->
  # from http://goo.gl/2vcMH
  number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
  n      = if isFinite(+number)   then +number else 0
  prec   = if isFinite(+decimals) then Math.abs(decimals) else 0
  s      = ''
  toFixedFix =  (n, prec) ->
    k = Math.pow(10, prec)
    '' + Math.round(n * k) / k
  s = (if prec then toFixedFix(n, prec) else '' + Math.round(n)).split('.')
  if (s[0].length > 3)
     s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
  if (s[1] || '').length < prec
      s[1] = s[1] || ''
      s[1] += new Array(prec - s[1].length + 1).join('0')
   s.join(dec)
 
#--| lib/abcd.coffee |-------------------------------------------------------------
 
class ABCD
  constructor: () ->
    @a   = {} ; @b  = {} ; @c   = {} ; @d = {}
    @yes = 0  ; @no = 0  ; @all = {}

  add:(actual,predicted) ->
    @known(actual)
    @known(predicted)
    if actual is predicted then @yes +=1 else @no += 1
    for target,ignore of @all
      @known(target)
      if (actual is target)
        if predicted is actual then @d[target] += 1 else @b[target] += 1
      else
        if predicted is target then @c[target] += 1 else @a[target] += 1

  known: (x) ->
    @a[x]   or= 0
    @b[x]   or= 0
    @c[x]   or= 0
    @d[x]   or= 0
    @all[x] or= 0
    @a[x]= @yes + @no if (@all[x] += 1) is 1

  report1: (k,a,b,c,d) ->
    o    = (n) -> (d3 n) * 100
    acc  = pd = pf = prec = f = g = pn = 0
    pd   = d     / (b+d) if (b+d) > 0
    pf   = c     / (a+c) if (a+c) > 0
    pn   = (b+d) / (a+c) if (a+c) > 0
    prec = d     / (c+d) if (c+d) > 0
    g    = 2*(1-pf)*pd / (1-pf+pd)  if (1-pf+pd)    > 0
    f    = 2*prec*pd   / (prec+pd)  if (prec+pd)    > 0
    acc  = @yes        / (@yes+@no)  if (@yes+@no) > 0
    out  = {a: a, b: b, c: c, d: d, pn: o(pn), acc: o(acc)}
    out.pd   = o(pd)
    out.pf   = o(pf)
    out.prec = o(prec)
    out.f    = o(f)
    out.g    = o(g)
    out

  report: () ->
    out = {}
    for k,val of @all
      out[k] = @report1 k,@a[k],@b[k],@c[k],@d[k]
    out
 
#--| lib/rand.coffee |-------------------------------------------------------------
 
class Rand
  # Knuth and Lewis' improvements to Park and Miller's LCPRNG
  # if created without a seed, uses current time as seed
  constructor: (@seed) ->
    @multiplier = 1664525
    @modulo     = 4294967296 # 2**32-1;
    @offset     = 1013904223
    unless @seed? && 0 <= seed < @modulo
      @seed = (new Date().valueOf() * new Date().getMilliseconds()) % @modulo

  seed: (seed)      -> @seed = seed
  randn:            -> @seed = (@multiplier*@seed + @offset) % @modulo
  randf:            -> @randn() / @modulo
  rand:  (n)        -> Math.floor(@randf() * n)
  rand2: (min, max) -> min + @rand(max-min)

R = new Rand

shuffle = (l,r = R) ->
  n = l.length
  for i in [n-1..1]
    j = r.rand2(0,i)
    [ l[i],  l[j] ] = [ l[j], l[i] ]
  l

normal = (m,s,r = R) ->
  boxMuller = () ->
    w=1
    while w >= 1
      x1 = 2.0 * r.randf() - 1
      x2 = 2.0 * r.randf() - 1
      w  = x1*x1 + x2*x2
    w = sqrt((-2.0 * ln(w))/w)
    x1 * w
  m + boxMuller() * s

any = (l,r=R) ->
  l[r.rand2(0,l.length)]
 
#--| tiles.coffee |-------------------------------------------------------------
 
class Percentiles
  constructor:(@l,@prefix="",@q=5,@w=5,@decimals=2) ->
  lo:  (n) -> Math.round n
  as:  (n) -> nummat n,@decimals
  asString:() -> @worker(@l.sort(),@l.length,@q)
  worker: (l ,n,q,prefix) ->
    q1     = @as l[@lo 0.10*n]; q1s  = @pad q1
    q2     = @as l[@lo 0.30*n]; q2s  = @pad q2
    median = @as l[@lo 0.50*n]; meds = @pad median
    q3     = @as l[@lo 0.70*n]; q3s  = @pad q3
    q4     = @as l[@lo 0.90*n]; q4s  = @pad q4
    "#{@prefix}#{q1s}, #{q2s}, #{meds}, #{q3s}, #{q4s}"
  pad: (n) ->
    tmp = ""
    size = "#{n}".length
    for i in [1..(@w - size)]
      tmp = " " + tmp
    "#{tmp}#{n}"



 demo = () ->
   n = 1000
   one = () -> pow normal(0.5,0.1),0.8
   all = () -> (one() for i in [1..n])
   p = new Percentiles  all()
   show p.asString()

demo()



 
# CREDITS
# =======
# 
# Tim Menzies tim@menzies.us
# 
# INSTALL
# =======
# 
# 0)  Essential first step: make yourself a cup of coffee.
# 1)  Install coffee on your local machine.
# 
# 2)  Download this file and call it, say,  'lib/globals.coffee'.
#     2a) Optional (UNIX systems only)
# 
#        chmod +x lib/globals.coffee  # <=== On UNIX systems
# 
# 3)  Look for 'data/' in this file. Usually, its the last few
#     lines of code (above). If you see any reference to such 
#     a data file, then...
#     3a) Download those data files from
#         http://now.unbox.org/all/trunk/doc/coffee-mine/data
#     3b) Edit this file so it points to those data files.
# 
# 4)  See if this file runs:
# 
#         ./lib/globals.coffee         # <=== UNIX systems
#         coffee lib/globals.coffee    # <=== for other systems
# 
# To check if it is running correctly, see http://coffee.unbox.com 
# (look for blogs entries around lib/rand.coffee).
# 
# COPYRIGHT
# ---------
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
