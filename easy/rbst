#!/usr/bin/env coffee
# Copyright (c) 2011,2012 Tim Menzies, MIT License
# 
#  #####   #####    ####    #####
#  #    #  #    #  #          #
#  #    #  #####    ####      #
#  #####   #    #       #     #
#  #   #   #    #  #    #     #
#  #    #  #####    ####      #
# 
# Version ....... : rbst-103
# Built ......... : Thu Jan  5 00:26:06 EST 2012
# License ....... : see below.
# Installation .. : see below.
# Report bugs ... : https://github.com/timm/coffee-mine/issues
# For doco ...... : read http://coffee.unbox.org around Thu Jan  5 00:26:06 EST 2012
 
#--| lib/globals.coffee |-------------------------------------------------------------
 
pow  = Math.pow
e    = Math.E
pi   = Math.PI
sqrt = Math.sqrt
ln   = Math.log
show = console.log

inf  = 1e+32
ninf = -1 * inf

d2 = (n) -> Math.round(n*100)/100

d3 = (n) -> Math.round(n*1000)/1000

d4 = (n) -> Math.round(n*10000)/10000

nummat = (number, decimals, dec=".", sep=",") ->
  # from http://goo.gl/2vcMH
  number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
  n      = if isFinite(+number) then +number else 0
  prec   = if isFinite(+decimals) then Math.abs(decimals) else 0
  s      = ''
  toFixedFix =  (n, prec) ->
    k = Math.pow(10, prec)
    '' + Math.round(n * k) / k
  s = if prec then toFixedFix(n, prec) else '' + Math.round(n)
  s = s.split('.')
  if (s[0].length > 3)
     s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
  if (s[1]  || '').length < prec
      s[1] = s[1] || ''
      s[1] += new Array(prec - s[1].length + 1).join('0')
   s.join(dec)
 
#--| lib/rand.coffee |-------------------------------------------------------------
 
class Rand
  # Knuth and Lewis' improvements to Park and Miller's LCPRNG
  # if created without a seed, uses current time as seed
  constructor: (@seed) ->
    @multiplier = 1664525
    @modulo     = 4294967296 # 2**32-1;
    @offset     = 1013904223
    unless @seed? && 0 <= seed < @modulo
      @seed = (new Date().valueOf() * new Date().getMilliseconds()) % @modulo

  seed: (seed)      -> @seed = seed
  randn:            -> @seed = (@multiplier*@seed + @offset) % @modulo
  randf:            -> @randn() / @modulo
  rand:  (n)        -> Math.floor(@randf() * n)
  rand2: (min, max) -> min + @rand(max-min)

R = new Rand

shuffle = (l,r = R) ->
  n = l.length
  for i in [n-1..1]
    j = r.rand2(0,i)
    [ l[i],  l[j] ] = [ l[j], l[i] ]
  l

normal = (m,s,r = R) ->
  boxMuller = () ->
    w=1
    while w >= 1
      x1 = 2.0 * r.randf() - 1
      x2 = 2.0 * r.randf() - 1
      w  = x1*x1 + x2*x2
    w = sqrt((-2.0 * ln(w))/w)
    x1 * w
  m + boxMuller() * s

any = (l,r=R) ->
  l[r.rand2(0,l.length)]
 
#--| lib/rbst.coffee |-------------------------------------------------------------
 
###

NAME
====

Rbst

Synopsis
========

Add 1,000 randomly
generated key value pairs to a RandomBinaryTree:

    one = -> x R.rand2(1,10000), R.rand2(1,10)
    b = null
    for n in [1..1000]
      thing = one()
      if not b
        b = new RandomBinaryTree thing.x, thing.y
      else
        b.add thing

Description
===========

A binary search tree (BST)
contains nodes with a _key,value_ and _left_ and _right_
pointers to sub-trees. In such trees:

+ all the _left_ keys are less than or equal to the local _key_
+ all the _right_ jeys are greater than the local _key_.

Ideally, a BST is A balanced BST has the same number of nodes in the _left_ and
_right_ sub-trees. There are many schemes for building such

###
#
x = (x,y) -> new Pair x,y

class Pair
  constructor: (@x,@y) ->

class RandomBinaryTree
  constructor: (@key,@value) ->
    @n = 1
    @left = @right = null


  rotateR: (h) ->
    x = h.right
    h.right = x.left
    x.left = h
    x

  rotateL: (h) ->
    x = h.left
    h.left = x.right
    x.right = h
    x


  rootInsert: (h,key,val,lt) ->
    unless h
      return new RandomBinaryTree key,val
    if lt key,h.key
      h.left = @rootInsert h.left,  key,val,lt
      h      = @rotateR h
    else
      h.right = @rootInsert h.right,key,val,lt
      h       = @rotateL h
    h

  insert: (h,key,val,lt) ->
    unless h
      return new RandomBinaryTree key,val
    if R.rand() < 1/(h.n + 1)
      return @rootInsert h,     key,val,lt
    if lt key,h.key
      h.left   = @insert h.left,key,val,lt
    else
      h.right  = @insert h.right,key,val,lt
    @n += 1
    h

  adds: (many, lt = ((x,y) -> x < y)) ->
    out = @
    for one in many
      out = @insert out, one.x,one.y, lt
    out

  add: (one, lt = ((x,y) -> x < y)) ->
     @insert @ , one.x,one.y, lt

  show: (indent="",prefix="=",add="|   ") ->
    s = "#{indent}#{prefix}#{@key}*#{@n} :  #{@value}"
    show s
    @left.show  indent+add,"<= ",add if @left
    @right.show indent+add,">  ",add if @right


 
#--| rbst.coffee |-------------------------------------------------------------
 
one = -> x R.rand2(1,10000), R.rand2(1,10)
b = null

for n in [1..1000]
  thing = one()
  if not b
    b = new RandomBinaryTree thing.x, thing.y
  else
    b.add thing


 
# CREDITS
# =======
# 
# Tim Menzies tim@menzies.us
# 
# INSTALL
# =======
# 
# 0)  Essential first step: make yourself a cup of coffee.
# 1)  Install coffee on your local machine.
# 
# 2)  Download this file and call it, say,  'lib/globals.coffee'.
#     2a) Optional (UNIX systems only)
# 
#        chmod +x lib/globals.coffee  # <=== On UNIX systems
# 
# 3)  Look for 'data/' in this file. Usually, its the last few
#     lines of code (above). If you see any reference to such 
#     a data file, then...
#     3a) Download those data files from
#         http://now.unbox.org/all/trunk/doc/coffee-mine/data
#     3b) Edit this file so it points to those data files.
# 
# 4)  See if this file runs:
# 
#         ./lib/globals.coffee         # <=== UNIX systems
#         coffee lib/globals.coffee    # <=== for other systems
# 
# To check if it is running correctly, see http://coffee.unbox.com 
# (look for blogs entries around lib/rbst.coffee).
# 
# COPYRIGHT
# ---------
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
